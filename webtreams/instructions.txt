# Tutorial Nodejs e navegador Webstreams

- Comando para listar os arquivos do diretório: ls
- Comando para informar o número de linhas de um arquivo csv: Get-content 'animeflv.csv' | Measure-Object –Line

- Digite o comando para iniciarlizar um projeto Node.js: npm init -y

- Atualize o arquivo: package.json com as seguintes linhas:

{
  "name": "webstreams",
  "version": "0.0.1",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "csvtojson": "^2.0.10"
  },
  "description": ""
}

- Crie o arquivo na pasta server: index.js

- Atualize o arquivo: package.json com as seguintes linhas:

{
  "name": "webstreams",
  "version": "0.0.1",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "dev": "node --watch index.js",
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "csvtojson": "^2.0.10"
  },
  "description": ""
}

- Digite o seguinte comando para rodar o projeto: npm run dev

- Atualize o arquivo: index.js com as seguintes linhas:

import { createServer } from 'node:http'

const PORT = 3000
createServer(async (request, response) => {
    response.end('ok')
})
.listen(PORT)
.on('listening', _ => console.log(`server is running at ${PORT}`))

- Verifique se o terminal está com a seguinte mensagem: Server is running at 3000

- No campo do terminal do VSCODE. Ao lado da aba '+' clique para expandir o menu e clique em: Dividir terminal

- Digite o seguinte comando: curl -N localhost:3000
- Verifique se o status: ok

- Atualize o arquivo: index.js com as seguintes linhas:

import { createServer } from 'node:http'

const PORT = 3000
createServer(async (request, response) => {
    const headers = {
        'Access-Control-Allow-Origin':'*',
        'Access-Control-Allow-Methods':'*',
    }
    if(request.method === 'OPTIONS'){
        response.writeHead(204, headers)
        response.end()
        return;
    }
    response.writeHead(200, headers);
    response.end('ok')
})
.listen(PORT)
.on('listening', _ => console.log(`server is running at ${PORT}`))

- Digite o seguinte comando: curl -i -X OPTIONS -N localhost:3000
- O retorno será o seguinte:

localhost:3000
HTTP/1.1 204 No Content
Access-Control-Allow-Origin: *
Access-Control-Allow-Methods: *
Date: Thu, 09 Feb 2023 21:25:13 GMT
Connection: keep-alive
Keep-Alive: timeout=5

- Atualize o arquivo: index.js com as seguintes linhas:

import { createServer } from 'node:http'
import { createReadStream } from 'node:fs'
const PORT = 3000
// curl -i -X OPTIONS -N localhost:3000
// curl -N localhost:3000
createServer(async (request, response) => {
    const headers = {
        'Access-Control-Allow-Origin':'*',
        'Access-Control-Allow-Methods':'*',
    }
    if(request.method === 'OPTIONS'){
        response.writeHead(204, headers)
        response.end()
        return;
    }

    createReadStream('./animeflv.csv')
    .pipe(response)

    response.writeHead(200, headers);
    // response.end('ok')
})
.listen(PORT)
.on('listening', _ => console.log(`server is running at ${PORT}`))

- Digite o seguinte comando: curl -N localhost:3000
- Verifique se os dados apareceram na console.

- Atualize o arquivo: index.js com as seguintes linhas:

import { createServer } from 'node:http'
import { createReadStream } from 'node:fs'
import { Readable } from 'node:stream'
import { WritableStream } from 'node:stream/web'
const PORT = 3000
// curl -i -X OPTIONS -N localhost:3000
// curl -N localhost:3000
createServer(async (request, response) => {
    const headers = {
        'Access-Control-Allow-Origin':'*',
        'Access-Control-Allow-Methods':'*',
    }
    if(request.method === 'OPTIONS'){
        response.writeHead(204, headers)
        response.end()
        return;
    }
    let item = 0    
    Readable.toWeb(createReadStream('./animeflv.csv'))
    .pipeTo(new WritableStream({
      write(chunk){
        item ++
        response.write(chunk)
      },
      close() {
        response.end()
      }

    }))

    response.writeHead(200, headers);
    // response.end('ok')
})
.listen(PORT)
.on('listening', _ => console.log(`server is running at ${PORT}`))

- Digite o seguinte comando: curl -N localhost:3000
- Verifique se os dados apareceram na console.

- Digite o seguinte comando para instalar a biblioteca do node (stream): npm i csvtojson

- Atualize o arquivo: index.js com as seguintes linhas:

import { createServer } from 'node:http'
import { createReadStream } from 'node:fs'
import { Readable, Transform } from 'node:stream'
import { WritableStream, TransformStream } from 'node:stream/web'
import csvtojson from 'csvtojson'
const PORT = 3000
// curl -i -X OPTIONS -N localhost:3000
// curl -N localhost:3000
createServer(async (request, response) => {
    const headers = {
        'Access-Control-Allow-Origin':'*',
        'Access-Control-Allow-Methods':'*',
    }
    if(request.method === 'OPTIONS'){
        response.writeHead(204, headers)
        response.end()
        return;
    }
    let item = 0    
    Readable.toWeb(createReadStream('./animeflv.csv'))
    // o passo a passo que cada item individual vai trafegar
    .pipeThrough(Transform.toWeb(csvtojson()))
    // pipeTo é a ultima etapa
    .pipeTo(new WritableStream({
      write(chunk){
        item ++
        response.write(chunk)
      },
      close() {
        response.end()
      }

    }))

    response.writeHead(200, headers);
    // response.end('ok')
})
.listen(PORT)
.on('listening', _ => console.log(`server is running at ${PORT}`))

- Digite o seguinte comando: curl -N localhost:3000
- Verifique se os dados apareceram na console.

- Atualize o arquivo: index.js com as seguintes linhas:

import { createServer } from 'node:http'
import { createReadStream } from 'node:fs'
import { Readable, Transform } from 'node:stream'
import { WritableStream, TransformStream } from 'node:stream/web'
import { setTimeout } from 'node:timers/promises'
import csvtojson from 'csvtojson'
const PORT = 3000
// curl -i -X OPTIONS -N localhost:3000
// curl -N localhost:3000
createServer(async (request, response) => {
    const headers = {
        'Access-Control-Allow-Origin':'*',
        'Access-Control-Allow-Methods':'*',
    }
    if(request.method === 'OPTIONS'){
        response.writeHead(204, headers)
        response.end()
        return;
    }

    // contador de itens processados, caso a aplicação seja parada
    let items = 0  
    request.once('close', _ => console.log(`connection was closed!`, items))  
    Readable.toWeb(createReadStream('./animeflv.csv'))
    // o passo a passo que cada item individual vai trafegar
    .pipeThrough(Transform.toWeb(csvtojson()))
    .pipeThrough(new TransformStream({
        transform(chunk, controller) {
            const data = JSON.parse(Buffer.from(chunk))
            const mappedData = {
                title: data.title,
                description: data.description,
                url_anime: data.url_anime   
            }
            // quebra de linha pois é um NDJSON 
            controller.enqueue(JSON.stringify(mappedData).concat('\n'))
        }
      }))
    // pipeTo é a ultima etapa
    .pipeTo(new WritableStream({
      // passamos a receber os dados sob demanda
      async write(chunk){
        await setTimeout(1000)
        items ++
        response.write(chunk)
      },
      close() {
        response.end()
      }

    }))

    response.writeHead(200, headers);
    // response.end('ok')
})
.listen(PORT)
.on('listening', _ => console.log(`server is running at ${PORT}`))

- Digite o seguinte comando: curl -N localhost:3000
- Verifique se os dados estão sendo processado na console.
- Control + C para break da operação
- Verifique quantos itens foram processados

- Procedimento finalizado, agora vamos para a parte do app

- Acesse o diretório do app pelo terminal VSCODE
- Digite o seguinte comando: npm i
- Digite o seguinte comando: npm i -D http-server

- Atualize o arquivo: package.json com as seguintes linhas:

{
  "devDependencies": {
    "http-server": "^14.1.1"
  },
  "name": "app",
  "version": "0.0.1",
  "main": "index.js",
  "dependencies": {
    "async": "^2.6.4",
    "ansi-styles": "^4.3.0",
    "call-bind": "^1.0.2",
    "basic-auth": "^2.0.1",
    "chalk": "^4.1.2",
    "color-convert": "^2.0.1",
    "color-name": "^1.1.4",
    "corser": "^2.0.1",
    "debug": "^3.2.7",
    "eventemitter3": "^4.0.7",
    "follow-redirects": "^1.15.2",
    "function-bind": "^1.1.1",
    "get-intrinsic": "^1.1.3",
    "has": "^1.0.3",
    "has-flag": "^4.0.0",
    "he": "^1.2.0",
    "has-symbols": "^1.0.3",
    "http-proxy": "^1.18.1",
    "html-encoding-sniffer": "^3.0.0",
    "iconv-lite": "^0.6.3",
    "lodash": "^4.17.21",
    "mime": "^1.6.0",
    "minimist": "^1.2.7",
    "mkdirp": "^0.5.6",
    "ms": "^2.1.3",
    "object-inspect": "^1.12.2",
    "opener": "^1.5.2",
    "portfinder": "^1.0.32",
    "qs": "^6.11.0",
    "requires-port": "^1.0.0",
    "safe-buffer": "^5.1.2",
    "safer-buffer": "^2.1.2",
    "secure-compare": "^3.0.1",
    "side-channel": "^1.0.4",
    "supports-color": "^7.2.0",
    "url-join": "^4.0.1",
    "union": "^0.5.0",
    "whatwg-encoding": "^2.0.0"
  },
  "scripts": {
    "start": "npx http-server .",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}

- Digite o seguinte comando para start o servidor: npm start

- Crie um arquivo: index.js
- Atualize o código do arquivo:

const API_URL = 'http://localhost:3000'

async function consumeAPI(signal) {
  const response = await fetch(API_URL, {
    signal
  })

  const reader = response.body
    .pipeThrough(new TextDecoderStream())
    .pipeThrough(parseNDJSON())

  return reader
}

function parseNDJSON() {
  let ndjsonBuffer = ''

  return new TransformStream({
    transform(ndjsonChunk, controller) {
      ndjsonBuffer += ndjsonChunk
      const jsonValues = ndjsonBuffer.split('\n')
      jsonValues.slice(0, -1)
        .forEach((jsonValue) => controller.enqueue(JSON.parse(jsonValue)))

      ndjsonBuffer = jsonValues[jsonValues.length - 1]
    },
    flush(controller) {
      if (!ndjsonBuffer) return
      controller.enqueue(JSON.parse(ndjsonBuffer))
    }
  })
}

function appendToHTML(el) {
  return new WritableStream({
    async write({ title, description, url_anime }) {
      const card = `
        <article>
          <div class="text">
            <h3>[${++counter}] ${title}</h3>
            <p>${description.slice(0, 100)}</p>
            <a href="${url_anime}">Here's why</a>
          </div>
        </article>
        `
      el.innerHTML += card
    },
    abort(reason) {
      console.log('aborted**', reason)
    }
  })
}

const [
  start,
  stop,
  cards
] = ['Start', 'Stop', 'cards']
  .map(
    id => document.getElementById(id)
  )

let abortController = new AbortController()
let counter = 0

start.addEventListener('click', async () => {
  const reader = await consumeAPI(abortController.signal)
  reader.pipeTo(appendToHTML(cards))
})

stop.addEventListener('click', () => {
  abortController.abort()
  console.log('aborting...')
  abortController = new AbortController()
})

- Crie um arquivo: index.html
- Atualize o código do arquivo:

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Webstreams</title>
  <style>
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      grid-gap: 20px;
      align-items: stretch;
    }

    .grid>article {
      border: 1px solid #ccc;
    }

    .grid .text {
      padding: 20px;
    }
  </style>
</head>

<body>

  <button id="Start">Start</button>
  <button id="Stop">Stop</button>

  <div id="output"></div>
  <div class="container">
    <main id="cards" class="grid">
    </main>
  </div>

  <script src="./index.js" type="module" type="src"></script>
</body>

</html>

- Importante:
- Para o projeto rodar 100%
- Abra dois terminais VSCODE:
- No primeiro rode o seguinte comando: npm run dev
- No segundo rode o seguinte comando: npm start 

- Creditos: https://www.youtube.com/watch?v=-IpRYbL4yMk&t=173s













